const axios = require('axios');

// Configuraci√≥n del servidor
const BASE_URL = 'http://localhost:3023/api/pedido_app';

// Funci√≥n para verificar si el servidor est√° funcionando
async function verificarServidor() {
  try {
    console.log('üîç Verificando si el servidor est√° funcionando...');
    
    // Intentar hacer una petici√≥n simple al endpoint de productos
    const response = await axios.get(`${BASE_URL}/productos-test`);
    
    console.log('‚úÖ Servidor funcionando correctamente');
    console.log('  Status:', response.status);
    return true;
    
  } catch (error) {
    console.error('‚ùå Servidor no est√° funcionando:');
    if (error.code === 'ECONNREFUSED') {
      console.error('  El servidor no est√° ejecut√°ndose en el puerto 3023');
      console.error('  Aseg√∫rate de ejecutar: npm start o node index.js');
    } else if (error.response) {
      console.error('  Status:', error.response.status);
      console.error('  El servidor responde pero hay un error en el endpoint');
    } else {
      console.error('  Error:', error.message);
    }
    return false;
  }
}

// Funci√≥n para probar obtenci√≥n de correlativo
async function probarCorrelativo() {
  try {
    console.log('üî¢ Probando obtenci√≥n de correlativo...');
    
    const response = await axios.post(`${BASE_URL}/obtener-correlativo-pedido`);
    
    console.log('‚úÖ Respuesta del servidor:');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data.data.numeroCorrelativo;
    
  } catch (error) {
    console.error('‚ùå Error detallado:');
    if (error.response) {
      console.error('  Status:', error.response.status);
      console.error('  Data:', error.response.data);
      console.error('  Headers:', error.response.headers);
    } else if (error.request) {
      console.error('  No se recibi√≥ respuesta del servidor');
      console.error('  Request:', error.request);
    } else {
      console.error('  Error:', error.message);
    }
    return null;
  }
}

// Funci√≥n para verificar estado de correlativos
async function verificarEstado() {
  try {
    console.log('üìä Verificando estado de correlativos...');
    
    const response = await axios.get(`${BASE_URL}/estado-correlativos`);
    
    console.log('‚úÖ Estado actual:');
    console.log(JSON.stringify(response.data, null, 2));
    
  } catch (error) {
    console.error('‚ùå Error detallado:');
    if (error.response) {
      console.error('  Status:', error.response.status);
      console.error('  Data:', error.response.data);
    } else if (error.request) {
      console.error('  No se recibi√≥ respuesta del servidor');
    } else {
      console.error('  Error:', error.message);
    }
  }
}

// Funci√≥n para probar m√∫ltiples solicitudes simult√°neas
async function probarConcurrencia() {
  console.log('üöÄ Probando concurrencia (5 solicitudes simult√°neas)...');
  
  const promesas = [];
  for (let i = 0; i < 5; i++) {
    promesas.push(
      probarCorrelativo().then(numero => {
        console.log(`üìù Solicitud ${i + 1}: ${numero}`);
        return numero;
      })
    );
  }
  
  try {
    const resultados = await Promise.all(promesas);
    
    console.log('\nüìã Resultados:');
    resultados.forEach((numero, index) => {
      console.log(`  ${index + 1}. ${numero}`);
    });
    
    // Verificar que todos los n√∫meros son √∫nicos
    const numerosUnicos = [...new Set(resultados)];
    if (numerosUnicos.length === resultados.length) {
      console.log('‚úÖ Todos los n√∫meros son √∫nicos - Sistema funciona correctamente');
    } else {
      console.log('‚ùå Se encontraron n√∫meros duplicados - Hay un problema');
    }
    
  } catch (error) {
    console.error('‚ùå Error en prueba de concurrencia:', error);
  }
}

// Funci√≥n principal
async function main() {
  console.log('üß™ INICIANDO PRUEBAS DE CORRELATIVOS\n');
  
  // 0. Verificar si el servidor est√° funcionando
  console.log('0Ô∏è‚É£ Verificando servidor:');
  const servidorOk = await verificarServidor();
  if (!servidorOk) {
    console.log('\n‚ùå No se pueden continuar las pruebas. El servidor no est√° funcionando.');
    return;
  }
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 1. Verificar estado inicial
  console.log('1Ô∏è‚É£ Estado inicial:');
  await verificarEstado();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 2. Obtener un correlativo
  console.log('2Ô∏è‚É£ Obteniendo un correlativo:');
  const numero1 = await probarCorrelativo();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 3. Verificar estado despu√©s del primer correlativo
  console.log('3Ô∏è‚É£ Estado despu√©s del primer correlativo:');
  await verificarEstado();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 4. Probar concurrencia
  console.log('4Ô∏è‚É£ Prueba de concurrencia:');
  await probarConcurrencia();
  console.log('\n' + '='.repeat(50) + '\n');
  
  // 5. Estado final
  console.log('5Ô∏è‚É£ Estado final:');
  await verificarEstado();
  
  console.log('\nüéâ Pruebas completadas');
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  probarCorrelativo,
  verificarEstado,
  probarConcurrencia
};
